{"version":3,"file":"annotator-view.cjs.js","sources":["../../annotator-text/src/index.ts","../../annotator-core/src/enums/elements.ts","../../annotator-core/src/enums/styles.ts","../src/index.ts"],"sourcesContent":["import {HTML_NODE_ENUMS} from '@molar/annotator-core'\nimport {MOLAR_LABEL_CLASS_NAME} from '@molar/annotator-core'\nclass Text{\n    readonly textContent:string;\n    readonly parentNode:HTMLElement|null;\n    readonly className: string\n    readonly childList: Text[];\n    public currentNode : HTMLElement|null\n    constructor(parentNode:HTMLElement,textContent:string,className:string){\n        this.currentNode = document.createElement(HTML_NODE_ENUMS.DIV)\n        this.childList = []\n        this.parentNode = parentNode;\n        this.textContent = textContent\n        this.className = className\n        this.generateTextNode()        \n    }\n    private generateTextNode(){\n        console.log(\"--generate current node--\")\n        this.currentNode.innerText = this.textContent\n        this.currentNode.className = this.className\n        if(this.parentNode!=null){\n            this.parentNode.appendChild(this.currentNode)\n        }\n    }\n    public addChildNodeToText(parentText:Text,childrenText:Text[]){\n        parentText.currentNode.innerText = \"\"\n        for(const item of childrenText){\n            parentText.currentNode.appendChild(item.currentNode)\n        }\n        this.childList.push(...childrenText)\n    }\n\n}\n\nfunction generateTextNode(textContent:string,isLabeled:boolean):Text{\n    const text = new Text(null,textContent,isLabeled?MOLAR_LABEL_CLASS_NAME.MOLAR_TEXT_LABLED:MOLAR_LABEL_CLASS_NAME.MOLAR_TEXT_UNLABELED)\n    return text\n}\n\nexport {Text,generateTextNode}","export enum HTML_NODE_ENUMS {\n    SPAN = 'SPAN',\n    BR = 'br',\n    DIV = 'div'\n}","export enum MOLAR_LABEL_CLASS_NAME{\n    MOLAR_TEXT_LABLED = \"molar-annotator-text--labeled\",\n    MOLAR_TEXT_UNLABELED = \"molar-annotator-text--unlabeled\",\n    MOLAR_TEXT_INITED = \"molar-annotator-text--inited\"\n}","import {Core,MOLAR_LABEL_CLASS_NAME} from '@molar/annotator-core'\nimport {Text} from '@molar/annotator-text'\n\n\nclass View {\n    readonly root:Core\n    readonly textNodeList:Text[]\n    constructor(root:Core){\n        this.root = root\n        this.textNodeList = []\n        this.generatorTextNode()\n        this.registerViewEventHandler()\n    }\n    private generatorTextNode(){\n        console.log(\"view generator\")\n        const parentNode = this.root.element\n        const nodeArr = this.root.data.split(this.root.splitRegExp)\n        for(let i=0;i<nodeArr.length;i++){\n            const text = new Text(parentNode,nodeArr[i],MOLAR_LABEL_CLASS_NAME.MOLAR_TEXT_INITED)\n            this.textNodeList.push(text)\n        }\n    }\n    private registerViewEventHandler(){\n        this.root.element.onmouseup = function(e){\n            this.root.textSelectionHandler.textSelection(e)\n        }.bind(this)\n    }\n    private renderViewByTextNodeList(textNodeList: Text[]){\n        // remove all text\n        for(let i=0;i<this.root.element.children.length;i++){\n            this.root.element.removeChild(this.root.element.children[i])\n        }\n        for(const item of textNodeList){\n            this.root.element.appendChild(item.currentNode)\n        }\n    }\n\n    public findTextByNode(SelectedNode:Node):Text|null{\n        let searchTextList = this.root.view.textNodeList\n        function findNodeInTree(searchTextList:Text[],SelectedNode:Node):Text{\n            let result\n            for(let i=0;i<searchTextList.length;i++){\n                if(searchTextList[i].currentNode == SelectedNode){\n                    return searchTextList[i]\n                }\n                if(searchTextList[i].childList.length!=0){\n                    result = findNodeInTree(searchTextList[i].childList,SelectedNode)\n                }\n            }\n            return result\n        }\n        return findNodeInTree(searchTextList,SelectedNode)\n    }\n    public findTextIndex(node:Node):number{\n        let findNode:Text\n        let searchTextList = this.root.view.textNodeList\n        function findNodeInTree(searchTextList:Text[],SelectedNode:Node):Text{\n            let result\n            for(let i=0;i<searchTextList.length;i++){\n                if(searchTextList[i].currentNode == SelectedNode){\n                    return searchTextList[i]\n                }\n                if(searchTextList[i].childList.length!=0){\n                    result = findNodeInTree(searchTextList[i].childList,SelectedNode)\n                }\n            }\n            return result\n        }\n        findNode = findNodeInTree(searchTextList,node)\n        console.log(findNode)\n        if(findNode.parentNode!=null){\n            return this.textNodeList.findIndex(e=>{\n                return e == findNode\n            })\n        }else{\n            return this.textNodeList.findIndex(e=>{\n                return e.childList.find(e=>e==findNode)!=null\n            })\n        }\n    }\n\n}\nexport {View}"],"names":[],"mappings":"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"}